
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'fooIF ELSE FOR WHILE TRUE FALSE STATIC CONST LET STDIN PRINTLN IN FN ADDOP SUBOP DEROP POWER QUOOP REMOP COMPA EQLTO UNEQL LESST GREAT LSSEQ GRTEQ ANDOP OROPE SEMCL OPENP CLOSP LBCKT RBCKT EQUAL SLCOM BLCOM DOTOP COMMA COLON STRNG INTVR IDVAR INPUT OUTPT\n    foo : program\n    \n    program : declarationList\n            | statement-list\n    \n    declarationList : declaration\n                    | declaration declarationList\n    \n    declaration : varDeclaration\n                | constDeclaration\n                | staticDeclaration\n                | funcDeclaration\n    \n    varDeclaration : LET IDVAR EQUAL expression SEMCL\n                   | LET IDVAR EQUAL identifier SEMCL\n    \n    constDeclaration : CONST IDVAR EQUAL expression SEMCL\n    \n    staticDeclaration : STATIC IDVAR EQUAL expression SEMCL\n    \n    funcDeclaration : FN function\n    \n    function : IDVAR parameters block\n    \n    parameters : OPENP CLOSP\n               | OPENP paramList CLOSP\n               | OPENP expression CLOSP\n    \n    paramList : parameter\n              | parameter COMMA paramList\n    \n    parameter : IDVAR\n              | INTVR\n              | STRNG\n    \n    block : LBCKT RBCKT\n          | LBCKT statement-list RBCKT\n    \n    statement-list : stmt\n                   | stmt statement-list\n    \n    inputStmt : STDIN OPENP stmt CLOSP SEMCL\n    \n    outputStmt : PRINTLN OPENP stmt CLOSP SEMCL\n    \n    stmt : expression\n         | declaration\n         | selectionStmt\n         | iterationStmt\n         | inputStmt\n         | outputStmt\n    \n    expression : basicExp\n               | assignmentExp SEMCL\n               | comparisonExp\n               | boolExp\n    \n    basicExp : INTVR\n             | STRNG\n             | IDVAR\n    \n    assignmentExp : identifier sumOp basicExp\n                  | identifier sumOp assignmentExp\n    \n    identifier : IDVAR\n               | INTVR\n    \n    comparisonExp : basicExp relop basicExp\n                  | basicExp relop comparisonExp\n    \n    relop : LESST\n          | LSSEQ\n          | GREAT\n          | GRTEQ\n          | EQUAL\n          | UNEQL\n          | EQLTO\n    \n    sumOp : ADDOP\n          | SUBOP\n          | DEROP\n          | QUOOP\n          | EQUAL\n          | REMOP\n    \n    selectionStmt : IF OPENP expression CLOSP block\n                  | IF OPENP expression CLOSP block ELSE block\n    \n    iterationStmt : FOR expression IN expression\n                  | WHILE parameters block\n    \n    boolExp : TRUE\n            | FALSE\n    '
    
_lr_action_items = {'LET':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,35,38,49,59,64,65,72,73,74,75,78,79,95,97,98,105,106,107,108,109,110,115,116,118,],[16,16,16,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,16,-31,-14,-37,16,16,-47,-48,-40,-42,-65,16,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'CONST':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,35,38,49,59,64,65,72,73,74,75,78,79,95,97,98,105,106,107,108,109,110,115,116,118,],[19,19,19,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,19,-31,-14,-37,19,19,-47,-48,-40,-42,-65,19,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'STATIC':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,35,38,49,59,64,65,72,73,74,75,78,79,95,97,98,105,106,107,108,109,110,115,116,118,],[20,20,20,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,20,-31,-14,-37,20,20,-47,-48,-40,-42,-65,20,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'FN':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,35,38,49,59,64,65,72,73,74,75,78,79,95,97,98,105,106,107,108,109,110,115,116,118,],[21,21,21,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,21,-31,-14,-37,21,21,-47,-48,-40,-42,-65,21,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'IF':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,38,49,59,64,65,72,73,74,75,78,79,95,97,98,105,106,107,108,109,110,115,116,118,],[26,-31,26,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,-31,-14,-37,26,26,-47,-48,-40,-42,-65,26,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'FOR':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,38,49,59,64,65,72,73,74,75,78,79,95,97,98,105,106,107,108,109,110,115,116,118,],[27,-31,27,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,-31,-14,-37,27,27,-47,-48,-40,-42,-65,27,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'WHILE':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,38,49,59,64,65,72,73,74,75,78,79,95,97,98,105,106,107,108,109,110,115,116,118,],[28,-31,28,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,-31,-14,-37,28,28,-47,-48,-40,-42,-65,28,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'STDIN':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,38,49,59,64,65,72,73,74,75,78,79,95,97,98,105,106,107,108,109,110,115,116,118,],[29,-31,29,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,-31,-14,-37,29,29,-47,-48,-40,-42,-65,29,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'PRINTLN':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,38,49,59,64,65,72,73,74,75,78,79,95,97,98,105,106,107,108,109,110,115,116,118,],[30,-31,30,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,-31,-14,-37,30,30,-47,-48,-40,-42,-65,30,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'INTVR':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,27,31,32,33,34,38,40,41,42,43,44,45,46,49,51,52,53,54,55,56,57,58,59,60,63,64,65,66,69,70,72,73,74,75,77,78,79,95,97,98,102,105,106,107,108,109,110,115,116,118,],[31,-31,31,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,31,-40,-41,-66,-67,-31,31,-56,-57,-58,-59,-60,-61,-14,74,-49,-50,-51,-52,-53,-54,-55,-37,31,85,31,31,92,31,31,-47,-48,-40,-42,31,-65,31,-15,-64,-24,113,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'STRNG':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,27,31,32,33,34,38,40,41,42,43,44,45,46,49,51,52,53,54,55,56,57,58,59,60,63,64,65,66,69,70,72,73,74,75,77,78,79,95,97,98,102,105,106,107,108,109,110,115,116,118,],[32,-31,32,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,32,-40,-41,-66,-67,-31,32,-56,-57,-58,-59,-60,-61,-14,32,-49,-50,-51,-52,-53,-54,-55,-37,32,86,32,32,32,32,32,-47,-48,-40,-42,32,-65,32,-15,-64,-24,114,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'IDVAR':([0,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,24,25,27,31,32,33,34,38,40,41,42,43,44,45,46,49,51,52,53,54,55,56,57,58,59,60,63,64,65,66,69,70,72,73,74,75,77,78,79,95,97,98,102,105,106,107,108,109,110,115,116,118,],[17,-31,17,-6,-7,-8,-9,-30,-32,-33,-34,-35,39,-42,47,48,50,-36,-38,-39,17,-40,-41,-66,-67,-31,17,-56,-57,-58,-59,-60,-61,-14,75,-49,-50,-51,-52,-53,-54,-55,-37,17,84,17,17,89,17,17,-47,-48,-40,-42,17,-65,17,-15,-64,-24,112,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'TRUE':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,27,31,32,33,34,38,49,59,60,63,64,65,66,69,70,72,73,74,75,77,78,79,95,97,98,105,106,107,108,109,110,115,116,118,],[33,-31,33,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,33,-40,-41,-66,-67,-31,-14,-37,33,33,33,33,33,33,33,-47,-48,-40,-42,33,-65,33,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'FALSE':([0,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,27,31,32,33,34,38,49,59,60,63,64,65,66,69,70,72,73,74,75,77,78,79,95,97,98,105,106,107,108,109,110,115,116,118,],[34,-31,34,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,34,-40,-41,-66,-67,-31,-14,-37,34,34,34,34,34,34,34,-47,-48,-40,-42,34,-65,34,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,35,36,37,38,49,59,72,73,74,75,78,95,97,98,105,106,107,108,109,110,115,116,118,],[0,-1,-2,-3,-4,-26,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,-4,-5,-27,-31,-14,-37,-47,-48,-40,-42,-65,-15,-64,-24,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'RBCKT':([6,7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,37,38,49,59,72,73,74,75,78,79,95,97,98,99,105,106,107,108,109,110,115,116,118,],[-26,-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,-27,-31,-14,-37,-47,-48,-40,-42,-65,98,-15,-64,-24,110,-10,-11,-12,-13,-62,-25,-28,-29,-63,]),'CLOSP':([7,8,9,10,11,12,13,14,15,17,22,24,25,31,32,33,34,38,49,59,63,72,73,74,75,76,78,81,82,83,84,85,86,87,88,95,97,98,105,106,107,108,109,110,111,112,113,114,115,116,118,],[-6,-7,-8,-9,-30,-32,-33,-34,-35,-42,-36,-38,-39,-40,-41,-66,-67,-31,-14,-37,80,-47,-48,-40,-42,96,-65,100,101,-19,-21,-22,-23,103,104,-15,-64,-24,-10,-11,-12,-13,-62,-25,-20,-21,-22,-23,-28,-29,-63,]),'LESST':([17,22,31,32,72,74,75,84,85,86,89,92,],[-42,52,-40,-41,52,-40,-42,-42,-40,-41,-42,-40,]),'LSSEQ':([17,22,31,32,72,74,75,84,85,86,89,92,],[-42,53,-40,-41,53,-40,-42,-42,-40,-41,-42,-40,]),'GREAT':([17,22,31,32,72,74,75,84,85,86,89,92,],[-42,54,-40,-41,54,-40,-42,-42,-40,-41,-42,-40,]),'GRTEQ':([17,22,31,32,72,74,75,84,85,86,89,92,],[-42,55,-40,-41,55,-40,-42,-42,-40,-41,-42,-40,]),'EQUAL':([17,18,22,31,32,39,47,48,72,74,75,84,85,86,89,91,92,],[-42,45,56,-40,-41,66,69,70,56,-40,-42,-42,-40,-41,-42,45,-40,]),'UNEQL':([17,22,31,32,72,74,75,84,85,86,89,92,],[-42,57,-40,-41,57,-40,-42,-42,-40,-41,-42,-40,]),'EQLTO':([17,22,31,32,72,74,75,84,85,86,89,92,],[-42,58,-40,-41,58,-40,-42,-42,-40,-41,-42,-40,]),'IN':([17,22,24,25,31,32,33,34,59,61,72,73,74,75,],[-42,-36,-38,-39,-40,-41,-66,-67,-37,77,-47,-48,-40,-42,]),'SEMCL':([17,22,23,24,25,31,32,33,34,59,67,68,72,73,74,75,89,90,91,92,93,94,103,104,],[-42,-36,59,-38,-39,-40,-41,-66,-67,-37,-43,-44,-47,-48,-40,-42,-42,105,106,-40,107,108,115,116,]),'ADDOP':([17,18,31,84,85,89,91,92,],[-45,41,-46,-45,-46,-45,41,-46,]),'SUBOP':([17,18,31,84,85,89,91,92,],[-45,42,-46,-45,-46,-45,42,-46,]),'DEROP':([17,18,31,84,85,89,91,92,],[-45,43,-46,-45,-46,-45,43,-46,]),'QUOOP':([17,18,31,84,85,89,91,92,],[-45,44,-46,-45,-46,-45,44,-46,]),'REMOP':([17,18,31,84,85,89,91,92,],[-45,46,-46,-45,-46,-45,46,-46,]),'OPENP':([26,28,29,30,50,],[60,63,64,65,63,]),'LBCKT':([62,71,80,96,100,101,117,],[79,79,-16,79,-17,-18,79,]),'COMMA':([83,84,85,86,112,113,114,],[102,-21,-22,-23,-21,-22,-23,]),'ELSE':([98,109,110,],[-24,117,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'foo':([0,],[1,]),'program':([0,],[2,]),'declarationList':([0,5,35,],[3,36,36,]),'statement-list':([0,6,79,],[4,37,99,]),'declaration':([0,5,6,35,64,65,79,],[5,35,38,35,38,38,38,]),'stmt':([0,6,64,65,79,],[6,6,87,88,6,]),'varDeclaration':([0,5,6,35,64,65,79,],[7,7,7,7,7,7,7,]),'constDeclaration':([0,5,6,35,64,65,79,],[8,8,8,8,8,8,8,]),'staticDeclaration':([0,5,6,35,64,65,79,],[9,9,9,9,9,9,9,]),'funcDeclaration':([0,5,6,35,64,65,79,],[10,10,10,10,10,10,10,]),'expression':([0,6,27,60,63,64,65,66,69,70,77,79,],[11,11,61,76,82,11,11,90,93,94,97,11,]),'selectionStmt':([0,6,64,65,79,],[12,12,12,12,12,]),'iterationStmt':([0,6,64,65,79,],[13,13,13,13,13,]),'inputStmt':([0,6,64,65,79,],[14,14,14,14,14,]),'outputStmt':([0,6,64,65,79,],[15,15,15,15,15,]),'identifier':([0,6,27,40,60,63,64,65,66,69,70,77,79,],[18,18,18,18,18,18,18,18,91,18,18,18,18,]),'basicExp':([0,6,27,40,51,60,63,64,65,66,69,70,77,79,],[22,22,22,67,72,22,22,22,22,22,22,22,22,22,]),'assignmentExp':([0,6,27,40,60,63,64,65,66,69,70,77,79,],[23,23,23,68,23,23,23,23,23,23,23,23,23,]),'comparisonExp':([0,6,27,51,60,63,64,65,66,69,70,77,79,],[24,24,24,73,24,24,24,24,24,24,24,24,24,]),'boolExp':([0,6,27,60,63,64,65,66,69,70,77,79,],[25,25,25,25,25,25,25,25,25,25,25,25,]),'sumOp':([18,91,],[40,40,]),'function':([21,],[49,]),'relop':([22,72,],[51,51,]),'parameters':([28,50,],[62,71,]),'block':([62,71,96,117,],[78,95,109,118,]),'paramList':([63,102,],[81,111,]),'parameter':([63,102,],[83,83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> foo","S'",1,None,None,None),
  ('foo -> program','foo',1,'p_foo','rust_parser.py',61),
  ('program -> declarationList','program',1,'p_program','rust_parser.py',68),
  ('program -> statement-list','program',1,'p_program','rust_parser.py',69),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','rust_parser.py',86),
  ('declarationList -> declaration declarationList','declarationList',2,'p_declarationList','rust_parser.py',87),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','rust_parser.py',98),
  ('declaration -> constDeclaration','declaration',1,'p_declaration','rust_parser.py',99),
  ('declaration -> staticDeclaration','declaration',1,'p_declaration','rust_parser.py',100),
  ('declaration -> funcDeclaration','declaration',1,'p_declaration','rust_parser.py',101),
  ('varDeclaration -> LET IDVAR EQUAL expression SEMCL','varDeclaration',5,'p_varDeclaration','rust_parser.py',109),
  ('varDeclaration -> LET IDVAR EQUAL identifier SEMCL','varDeclaration',5,'p_varDeclaration','rust_parser.py',110),
  ('constDeclaration -> CONST IDVAR EQUAL expression SEMCL','constDeclaration',5,'p_constDeclaration','rust_parser.py',121),
  ('staticDeclaration -> STATIC IDVAR EQUAL expression SEMCL','staticDeclaration',5,'p_staticDeclaration','rust_parser.py',128),
  ('funcDeclaration -> FN function','funcDeclaration',2,'p_funcDeclaration','rust_parser.py',135),
  ('function -> IDVAR parameters block','function',3,'p_function','rust_parser.py',144),
  ('parameters -> OPENP CLOSP','parameters',2,'p_parameters','rust_parser.py',153),
  ('parameters -> OPENP paramList CLOSP','parameters',3,'p_parameters','rust_parser.py',154),
  ('parameters -> OPENP expression CLOSP','parameters',3,'p_parameters','rust_parser.py',155),
  ('paramList -> parameter','paramList',1,'p_paramList','rust_parser.py',169),
  ('paramList -> parameter COMMA paramList','paramList',3,'p_paramList','rust_parser.py',170),
  ('parameter -> IDVAR','parameter',1,'p_parameter','rust_parser.py',182),
  ('parameter -> INTVR','parameter',1,'p_parameter','rust_parser.py',183),
  ('parameter -> STRNG','parameter',1,'p_parameter','rust_parser.py',184),
  ('block -> LBCKT RBCKT','block',2,'p_block','rust_parser.py',193),
  ('block -> LBCKT statement-list RBCKT','block',3,'p_block','rust_parser.py',194),
  ('statement-list -> stmt','statement-list',1,'p_statement_list','rust_parser.py',209),
  ('statement-list -> stmt statement-list','statement-list',2,'p_statement_list','rust_parser.py',210),
  ('inputStmt -> STDIN OPENP stmt CLOSP SEMCL','inputStmt',5,'p_input_stmt','rust_parser.py',221),
  ('outputStmt -> PRINTLN OPENP stmt CLOSP SEMCL','outputStmt',5,'p_output_stmt','rust_parser.py',228),
  ('stmt -> expression','stmt',1,'p_stmt','rust_parser.py',235),
  ('stmt -> declaration','stmt',1,'p_stmt','rust_parser.py',236),
  ('stmt -> selectionStmt','stmt',1,'p_stmt','rust_parser.py',237),
  ('stmt -> iterationStmt','stmt',1,'p_stmt','rust_parser.py',238),
  ('stmt -> inputStmt','stmt',1,'p_stmt','rust_parser.py',239),
  ('stmt -> outputStmt','stmt',1,'p_stmt','rust_parser.py',240),
  ('expression -> basicExp','expression',1,'p_expression','rust_parser.py',248),
  ('expression -> assignmentExp SEMCL','expression',2,'p_expression','rust_parser.py',249),
  ('expression -> comparisonExp','expression',1,'p_expression','rust_parser.py',250),
  ('expression -> boolExp','expression',1,'p_expression','rust_parser.py',251),
  ('basicExp -> INTVR','basicExp',1,'p_basic','rust_parser.py',259),
  ('basicExp -> STRNG','basicExp',1,'p_basic','rust_parser.py',260),
  ('basicExp -> IDVAR','basicExp',1,'p_basic','rust_parser.py',261),
  ('assignmentExp -> identifier sumOp basicExp','assignmentExp',3,'p_assignment_expression','rust_parser.py',271),
  ('assignmentExp -> identifier sumOp assignmentExp','assignmentExp',3,'p_assignment_expression','rust_parser.py',272),
  ('identifier -> IDVAR','identifier',1,'p_id','rust_parser.py',283),
  ('identifier -> INTVR','identifier',1,'p_id','rust_parser.py',284),
  ('comparisonExp -> basicExp relop basicExp','comparisonExp',3,'p_compExp','rust_parser.py',293),
  ('comparisonExp -> basicExp relop comparisonExp','comparisonExp',3,'p_compExp','rust_parser.py',294),
  ('relop -> LESST','relop',1,'p_relop','rust_parser.py',302),
  ('relop -> LSSEQ','relop',1,'p_relop','rust_parser.py',303),
  ('relop -> GREAT','relop',1,'p_relop','rust_parser.py',304),
  ('relop -> GRTEQ','relop',1,'p_relop','rust_parser.py',305),
  ('relop -> EQUAL','relop',1,'p_relop','rust_parser.py',306),
  ('relop -> UNEQL','relop',1,'p_relop','rust_parser.py',307),
  ('relop -> EQLTO','relop',1,'p_relop','rust_parser.py',308),
  ('sumOp -> ADDOP','sumOp',1,'p_sumOp','rust_parser.py',317),
  ('sumOp -> SUBOP','sumOp',1,'p_sumOp','rust_parser.py',318),
  ('sumOp -> DEROP','sumOp',1,'p_sumOp','rust_parser.py',319),
  ('sumOp -> QUOOP','sumOp',1,'p_sumOp','rust_parser.py',320),
  ('sumOp -> EQUAL','sumOp',1,'p_sumOp','rust_parser.py',321),
  ('sumOp -> REMOP','sumOp',1,'p_sumOp','rust_parser.py',322),
  ('selectionStmt -> IF OPENP expression CLOSP block','selectionStmt',5,'p_selectionStmt','rust_parser.py',331),
  ('selectionStmt -> IF OPENP expression CLOSP block ELSE block','selectionStmt',7,'p_selectionStmt','rust_parser.py',332),
  ('iterationStmt -> FOR expression IN expression','iterationStmt',4,'p_iterationStmt','rust_parser.py',341),
  ('iterationStmt -> WHILE parameters block','iterationStmt',3,'p_iterationStmt','rust_parser.py',342),
  ('boolExp -> TRUE','boolExp',1,'p_boolExp','rust_parser.py',359),
  ('boolExp -> FALSE','boolExp',1,'p_boolExp','rust_parser.py',360),
]
