
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'fooLET STATIC CONST STDIN PRINTLN ITER TRUE FALSE CONCAT STRING NEW IF THEN ELSE LOOP WHILE FOR IN DOTOP LOOPC WHILE FORCN INCON ADDOP SUBOP QUOOP DEROP REMOP ANDOP OROPE EQUAL EQLTO UNEQL LESST GREAT LSSEQ GRTEQ STRNG SLCOM BLCOM IDVAR INTVR OPENP CLOSP LBCKT RBCKT SEMCLfoo : program\n    program : declarationList\n    general : stmt\n               | stmt general\n    stmt : expressionStmt\n            | declaration\n            | selectionStmt\n            | iterationStmt\n            | inputStmt\n            | outputStmt\n    declarationList : declarationList declaration\n                       | declaration\n    declaration : varDeclaration\n                   | constDeclaration\n                   | staticDeclaration\n    varDeclaration : LET IDVAR EQUAL IDVAR\n                      | LET IDVAR EQUAL INTVR\n                      | LET IDVAR EQUAL expressionStmt\n    constDeclaration : CONST IDVAR EQUAL IDVAR SEMCL\n    staticDeclaration : STATIC IDVAR EQUAL IDVAR SEMCL\n    expressionStmt : expression\n    iterationStmt : FOR IDVAR IN expression\n                     | WHILE expression EQLTO general\n                     | WHILE expression LESST general\n                     | WHILE expression GREAT general\n    selectionStmt : IF expression EQUAL general\n                     | IF expression EQUAL general ELSE\n    expression   : expression OROPE andExpr\n                    | andExpr\n    andExpr  : andExpr ANDOP relExpr\n                | relExpr\n    relExpr  : sumExpr relop sumExpr\n    relop    : LESST\n                | LSSEQ\n                | GREAT\n                | GRTEQ\n                | EQUAL\n                | UNEQL\n                | EQLTO\n    sumExpr  : sumExpr sumOp term\n                | term\n    sumOp    : ADDOP\n                | SUBOP\n    term : term mulOp number\n            | number\n    number : INTVR\n    mulOp    : DEROP\n                | QUOOP\n    inputStmt : STDIN OPENP stmt CLOSP\n    outputStmt : PRINTLN OPENP stmt CLOSP\n    booleans : LET IDVAR EQUAL TRUE\n                | LET IDVAR EQUAL FALSE\n    '
    
_lr_action_items = {'LET':([0,3,4,5,6,7,11,18,19,20,21,22,23,25,26,45,46,47,48,49,50,51,52,],[8,8,-12,-13,-14,-15,-11,-16,-17,-18,-21,-29,-31,-41,-45,-19,-20,-28,-46,-30,-32,-40,-44,]),'CONST':([0,3,4,5,6,7,11,18,19,20,21,22,23,25,26,45,46,47,48,49,50,51,52,],[9,9,-12,-13,-14,-15,-11,-16,-17,-18,-21,-29,-31,-41,-45,-19,-20,-28,-46,-30,-32,-40,-44,]),'STATIC':([0,3,4,5,6,7,11,18,19,20,21,22,23,25,26,45,46,47,48,49,50,51,52,],[10,10,-12,-13,-14,-15,-11,-16,-17,-18,-21,-29,-31,-41,-45,-19,-20,-28,-46,-30,-32,-40,-44,]),'$end':([1,2,3,4,5,6,7,11,18,19,20,21,22,23,25,26,45,46,47,48,49,50,51,52,],[0,-1,-2,-12,-13,-14,-15,-11,-16,-17,-18,-21,-29,-31,-41,-45,-19,-20,-28,-46,-30,-32,-40,-44,]),'IDVAR':([8,9,10,15,16,17,],[12,13,14,18,27,28,]),'EQUAL':([12,13,14,19,24,25,26,48,51,52,],[15,16,17,-46,37,-41,-45,-46,-40,-44,]),'INTVR':([15,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,],[19,48,48,48,48,-33,-34,-35,-36,-37,-38,-39,-42,-43,48,-47,-48,]),'DEROP':([19,25,26,48,51,52,],[-46,43,-45,-46,43,-44,]),'QUOOP':([19,25,26,48,51,52,],[-46,44,-45,-46,44,-44,]),'LESST':([19,24,25,26,48,51,52,],[-46,33,-41,-45,-46,-40,-44,]),'LSSEQ':([19,24,25,26,48,51,52,],[-46,34,-41,-45,-46,-40,-44,]),'GREAT':([19,24,25,26,48,51,52,],[-46,35,-41,-45,-46,-40,-44,]),'GRTEQ':([19,24,25,26,48,51,52,],[-46,36,-41,-45,-46,-40,-44,]),'UNEQL':([19,24,25,26,48,51,52,],[-46,38,-41,-45,-46,-40,-44,]),'EQLTO':([19,24,25,26,48,51,52,],[-46,39,-41,-45,-46,-40,-44,]),'ADDOP':([19,24,25,26,48,50,51,52,],[-46,40,-41,-45,-46,40,-40,-44,]),'SUBOP':([19,24,25,26,48,50,51,52,],[-46,41,-41,-45,-46,41,-40,-44,]),'OROPE':([21,22,23,25,26,47,48,49,50,51,52,],[29,-29,-31,-41,-45,-28,-46,-30,-32,-40,-44,]),'ANDOP':([22,23,25,26,47,48,49,50,51,52,],[30,-31,-41,-45,30,-46,-30,-32,-40,-44,]),'SEMCL':([27,28,],[45,46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'foo':([0,],[1,]),'program':([0,],[2,]),'declarationList':([0,],[3,]),'declaration':([0,3,],[4,11,]),'varDeclaration':([0,3,],[5,5,]),'constDeclaration':([0,3,],[6,6,]),'staticDeclaration':([0,3,],[7,7,]),'expressionStmt':([15,],[20,]),'expression':([15,],[21,]),'andExpr':([15,29,],[22,47,]),'relExpr':([15,29,30,],[23,23,49,]),'sumExpr':([15,29,30,31,],[24,24,24,50,]),'term':([15,29,30,31,32,],[25,25,25,25,51,]),'number':([15,29,30,31,32,42,],[26,26,26,26,26,52,]),'relop':([24,],[31,]),'sumOp':([24,50,],[32,32,]),'mulOp':([25,51,],[42,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> foo","S'",1,None,None,None),
  ('foo -> program','foo',1,'p_foo','rust_lex.py',156),
  ('program -> declarationList','program',1,'p_program','rust_lex.py',162),
  ('general -> stmt','general',1,'p_general','rust_lex.py',168),
  ('general -> stmt general','general',2,'p_general','rust_lex.py',169),
  ('stmt -> expressionStmt','stmt',1,'p_stmt','rust_lex.py',175),
  ('stmt -> declaration','stmt',1,'p_stmt','rust_lex.py',176),
  ('stmt -> selectionStmt','stmt',1,'p_stmt','rust_lex.py',177),
  ('stmt -> iterationStmt','stmt',1,'p_stmt','rust_lex.py',178),
  ('stmt -> inputStmt','stmt',1,'p_stmt','rust_lex.py',179),
  ('stmt -> outputStmt','stmt',1,'p_stmt','rust_lex.py',180),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declarationList','rust_lex.py',186),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','rust_lex.py',187),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','rust_lex.py',193),
  ('declaration -> constDeclaration','declaration',1,'p_declaration','rust_lex.py',194),
  ('declaration -> staticDeclaration','declaration',1,'p_declaration','rust_lex.py',195),
  ('varDeclaration -> LET IDVAR EQUAL IDVAR','varDeclaration',4,'p_varDeclaration','rust_lex.py',201),
  ('varDeclaration -> LET IDVAR EQUAL INTVR','varDeclaration',4,'p_varDeclaration','rust_lex.py',202),
  ('varDeclaration -> LET IDVAR EQUAL expressionStmt','varDeclaration',4,'p_varDeclaration','rust_lex.py',203),
  ('constDeclaration -> CONST IDVAR EQUAL IDVAR SEMCL','constDeclaration',5,'p_constDeclaration','rust_lex.py',209),
  ('staticDeclaration -> STATIC IDVAR EQUAL IDVAR SEMCL','staticDeclaration',5,'p_staticDeclaration','rust_lex.py',215),
  ('expressionStmt -> expression','expressionStmt',1,'p_expressionStmt','rust_lex.py',221),
  ('iterationStmt -> FOR IDVAR IN expression','iterationStmt',4,'p_iterationStmt','rust_lex.py',227),
  ('iterationStmt -> WHILE expression EQLTO general','iterationStmt',4,'p_iterationStmt','rust_lex.py',228),
  ('iterationStmt -> WHILE expression LESST general','iterationStmt',4,'p_iterationStmt','rust_lex.py',229),
  ('iterationStmt -> WHILE expression GREAT general','iterationStmt',4,'p_iterationStmt','rust_lex.py',230),
  ('selectionStmt -> IF expression EQUAL general','selectionStmt',4,'p_selectionStmt','rust_lex.py',236),
  ('selectionStmt -> IF expression EQUAL general ELSE','selectionStmt',5,'p_selectionStmt','rust_lex.py',237),
  ('expression -> expression OROPE andExpr','expression',3,'p_expression','rust_lex.py',243),
  ('expression -> andExpr','expression',1,'p_expression','rust_lex.py',244),
  ('andExpr -> andExpr ANDOP relExpr','andExpr',3,'p_andExpr','rust_lex.py',250),
  ('andExpr -> relExpr','andExpr',1,'p_andExpr','rust_lex.py',251),
  ('relExpr -> sumExpr relop sumExpr','relExpr',3,'p_rel_expr','rust_lex.py',257),
  ('relop -> LESST','relop',1,'p_relop','rust_lex.py',263),
  ('relop -> LSSEQ','relop',1,'p_relop','rust_lex.py',264),
  ('relop -> GREAT','relop',1,'p_relop','rust_lex.py',265),
  ('relop -> GRTEQ','relop',1,'p_relop','rust_lex.py',266),
  ('relop -> EQUAL','relop',1,'p_relop','rust_lex.py',267),
  ('relop -> UNEQL','relop',1,'p_relop','rust_lex.py',268),
  ('relop -> EQLTO','relop',1,'p_relop','rust_lex.py',269),
  ('sumExpr -> sumExpr sumOp term','sumExpr',3,'p_sumExpr','rust_lex.py',275),
  ('sumExpr -> term','sumExpr',1,'p_sumExpr','rust_lex.py',276),
  ('sumOp -> ADDOP','sumOp',1,'p_sumOp','rust_lex.py',282),
  ('sumOp -> SUBOP','sumOp',1,'p_sumOp','rust_lex.py',283),
  ('term -> term mulOp number','term',3,'p_term','rust_lex.py',289),
  ('term -> number','term',1,'p_term','rust_lex.py',290),
  ('number -> INTVR','number',1,'p_number','rust_lex.py',296),
  ('mulOp -> DEROP','mulOp',1,'p_mulOp','rust_lex.py',302),
  ('mulOp -> QUOOP','mulOp',1,'p_mulOp','rust_lex.py',303),
  ('inputStmt -> STDIN OPENP stmt CLOSP','inputStmt',4,'p_input_stmt','rust_lex.py',309),
  ('outputStmt -> PRINTLN OPENP stmt CLOSP','outputStmt',4,'p_output_stmt','rust_lex.py',315),
  ('booleans -> LET IDVAR EQUAL TRUE','booleans',4,'p_booleans','rust_lex.py',321),
  ('booleans -> LET IDVAR EQUAL FALSE','booleans',4,'p_booleans','rust_lex.py',322),
]
